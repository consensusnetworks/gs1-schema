#!/usr/bin/env node
var k=Object.create;var w=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,F=Object.prototype.hasOwnProperty;var P=e=>w(e,"__esModule",{value:!0});var j=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var z=(e,t,a,h)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of T(t))!F.call(e,o)&&(a||o!=="default")&&w(e,o,{get:()=>t[o],enumerable:!(h=C(t,o))||h.enumerable});return e},G=(e,t)=>z(P(w(e!=null?k(x(e)):{},"default",!t&&e&&e.__esModule?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var A=(e,t,a)=>new Promise((h,o)=>{var m=s=>{try{n(a.next(s))}catch(r){o(r)}},p=s=>{try{n(a.throw(s))}catch(r){o(r)}},n=s=>s.done?h(s.value):Promise.resolve(s.value).then(m,p);n((a=a.apply(e,t)).next())});var b=j((D,R)=>{var y=Symbol("arg flag"),l=class extends Error{constructor(t,a){super(t);this.name="ArgError",this.code=a,Object.setPrototypeOf(this,l.prototype)}};function _(e,{argv:t=process.argv.slice(2),permissive:a=!1,stopAtPositional:h=!1}={}){if(!e)throw new l("argument specification object is required","ARG_CONFIG_NO_SPEC");let o={_:[]},m={},p={};for(let n of Object.keys(e)){if(!n)throw new l("argument key cannot be an empty string","ARG_CONFIG_EMPTY_KEY");if(n[0]!=="-")throw new l(`argument key must start with '-' but found: '${n}'`,"ARG_CONFIG_NONOPT_KEY");if(n.length===1)throw new l(`argument key must have a name; singular '-' keys are not allowed: ${n}`,"ARG_CONFIG_NONAME_KEY");if(typeof e[n]=="string"){m[n]=e[n];continue}let s=e[n],r=!1;if(Array.isArray(s)&&s.length===1&&typeof s[0]=="function"){let[f]=s;s=(u,g,c=[])=>(c.push(f(u,g,c[c.length-1])),c),r=f===Boolean||f[y]===!0}else if(typeof s=="function")r=s===Boolean||s[y]===!0;else throw new l(`type missing or not a function or valid array type: ${n}`,"ARG_CONFIG_VAD_TYPE");if(n[1]!=="-"&&n.length>2)throw new l(`short argument keys (with a single hyphen) must have only one character: ${n}`,"ARG_CONFIG_SHORTOPT_TOOLONG");p[n]=[s,r]}for(let n=0,s=t.length;n<s;n++){let r=t[n];if(h&&o._.length>0){o._=o._.concat(t.slice(n));break}if(r==="--"){o._=o._.concat(t.slice(n+1));break}if(r.length>1&&r[0]==="-"){let f=r[1]==="-"||r.length===2?[r]:r.slice(1).split("").map(u=>`-${u}`);for(let u=0;u<f.length;u++){let g=f[u],[c,O]=g[1]==="-"?g.split(/=(.*)/,2):[g,void 0],i=c;for(;i in m;)i=m[i];if(!(i in p))if(a){o._.push(g);continue}else throw new l(`unknown or unexpected option: ${c}`,"ARG_UNKNOWN_OPTION");let[d,N]=p[i];if(!N&&u+1<f.length)throw new l(`option requires argument (but was followed by another short argument): ${c}`,"ARG_MISSING_REQUIRED_SHORTARG");if(N)o[i]=d(!0,i,o[i]);else if(O===void 0){if(t.length<n+2||t[n+1].length>1&&t[n+1][0]==="-"&&!(t[n+1].match(/^-?\d*(\.(?=\d))?\d*$/)&&(d===Number||typeof BigInt!="undefined"&&d===BigInt))){let $=c===i?"":` (alias for ${i})`;throw new l(`option requires argument: ${c}${$}`,"ARG_MISSING_REQUIRED_LONGARG")}o[i]=d(t[n+1],i,o[i]),++n}else o[i]=d(O,i,o[i])}}else o._.push(r)}return o}_.flag=e=>(e[y]=!0,e);_.COUNT=_.flag((e,t,a)=>(a||0)+1);_.ArgError=l;R.exports=_});var I=G(b()),E=G(require("path")),S=`
Usage:
  gs1data [command] [options]
  
Commands:
  generate  Generate sample data
  
Options:
  --help  Show this help
  
  --size  Number of items to generate (default: 10)
  --img   Whether to generate barcode images (default: false)
  --out   Output directory to place image files (default: ./out)
  `;function B(e){return A(this,null,function*(){let{_:t}=e;t.includes("--help")&&(process.stdout.write(S+`
`),process.exit(0)),(t.length<1||!t.includes("generate"))&&(process.stdout.write(S+`
`),process.exit(1));let a={size:e["--size"]||10,range:{start:"2019-01-01",end:"2019-03-25",increment:1},outDir:e["--out"]||E.default.join(process.cwd()+"out")}})}var U=(0,I.default)({"--help":Boolean,"--size":Number,"--out":String,"-h":"--help","-s":"--size","-o":"--out"});B(U).finally(()=>{process.stdout.write(`generated data
`),process.exit(0)}).catch(e=>{console.error(e),process.exit(1)});
